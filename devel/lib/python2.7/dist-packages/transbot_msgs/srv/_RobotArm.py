# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from transbot_msgs/RobotArmRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class RobotArmRequest(genpy.Message):
  _md5sum = "d8e8b3a3b74f38e6cd4cf9904695ae0f"
  _type = "transbot_msgs/RobotArmRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#request
string apply
"""
  __slots__ = ['apply']
  _slot_types = ['string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       apply

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotArmRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.apply is None:
        self.apply = ''
    else:
      self.apply = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.apply
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.apply = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.apply = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.apply
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.apply = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.apply = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from transbot_msgs/RobotArmResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import transbot_msgs.msg

class RobotArmResponse(genpy.Message):
  _md5sum = "ce432449e1f32c24abf23350648dc66d"
  _type = "transbot_msgs/RobotArmResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#response
Arm RobotArm


================================================================================
MSG: transbot_msgs/Arm
Joint[] joint

================================================================================
MSG: transbot_msgs/Joint
int32 id
int32 run_time
float32 angle
"""
  __slots__ = ['RobotArm']
  _slot_types = ['transbot_msgs/Arm']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       RobotArm

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotArmResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.RobotArm is None:
        self.RobotArm = transbot_msgs.msg.Arm()
    else:
      self.RobotArm = transbot_msgs.msg.Arm()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.RobotArm.joint)
      buff.write(_struct_I.pack(length))
      for val1 in self.RobotArm.joint:
        _x = val1
        buff.write(_get_struct_2if().pack(_x.id, _x.run_time, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.RobotArm is None:
        self.RobotArm = transbot_msgs.msg.Arm()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.RobotArm.joint = []
      for i in range(0, length):
        val1 = transbot_msgs.msg.Joint()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.run_time, _x.angle,) = _get_struct_2if().unpack(str[start:end])
        self.RobotArm.joint.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.RobotArm.joint)
      buff.write(_struct_I.pack(length))
      for val1 in self.RobotArm.joint:
        _x = val1
        buff.write(_get_struct_2if().pack(_x.id, _x.run_time, _x.angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.RobotArm is None:
        self.RobotArm = transbot_msgs.msg.Arm()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.RobotArm.joint = []
      for i in range(0, length):
        val1 = transbot_msgs.msg.Joint()
        _x = val1
        start = end
        end += 12
        (_x.id, _x.run_time, _x.angle,) = _get_struct_2if().unpack(str[start:end])
        self.RobotArm.joint.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2if = None
def _get_struct_2if():
    global _struct_2if
    if _struct_2if is None:
        _struct_2if = struct.Struct("<2if")
    return _struct_2if
class RobotArm(object):
  _type          = 'transbot_msgs/RobotArm'
  _md5sum = '02b16e175f9698037e15289959eba75b'
  _request_class  = RobotArmRequest
  _response_class = RobotArmResponse
