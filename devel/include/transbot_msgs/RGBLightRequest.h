// Generated by gencpp from file transbot_msgs/RGBLightRequest.msg
// DO NOT EDIT!


#ifndef TRANSBOT_MSGS_MESSAGE_RGBLIGHTREQUEST_H
#define TRANSBOT_MSGS_MESSAGE_RGBLIGHTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace transbot_msgs
{
template <class ContainerAllocator>
struct RGBLightRequest_
{
  typedef RGBLightRequest_<ContainerAllocator> Type;

  RGBLightRequest_()
    : effect(0)
    , speed(0)  {
    }
  RGBLightRequest_(const ContainerAllocator& _alloc)
    : effect(0)
    , speed(0)  {
  (void)_alloc;
    }



   typedef int32_t _effect_type;
  _effect_type effect;

   typedef int32_t _speed_type;
  _speed_type speed;





  typedef boost::shared_ptr< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> const> ConstPtr;

}; // struct RGBLightRequest_

typedef ::transbot_msgs::RGBLightRequest_<std::allocator<void> > RGBLightRequest;

typedef boost::shared_ptr< ::transbot_msgs::RGBLightRequest > RGBLightRequestPtr;
typedef boost::shared_ptr< ::transbot_msgs::RGBLightRequest const> RGBLightRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::transbot_msgs::RGBLightRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::transbot_msgs::RGBLightRequest_<ContainerAllocator1> & lhs, const ::transbot_msgs::RGBLightRequest_<ContainerAllocator2> & rhs)
{
  return lhs.effect == rhs.effect &&
    lhs.speed == rhs.speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::transbot_msgs::RGBLightRequest_<ContainerAllocator1> & lhs, const ::transbot_msgs::RGBLightRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace transbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "86fc3469724563f771634159f939b2f3";
  }

  static const char* value(const ::transbot_msgs::RGBLightRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x86fc3469724563f7ULL;
  static const uint64_t static_value2 = 0x71634159f939b2f3ULL;
};

template<class ContainerAllocator>
struct DataType< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "transbot_msgs/RGBLightRequest";
  }

  static const char* value(const ::transbot_msgs::RGBLightRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#request\n"
"int32 effect\n"
"int32 speed\n"
;
  }

  static const char* value(const ::transbot_msgs::RGBLightRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.effect);
      stream.next(m.speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RGBLightRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::transbot_msgs::RGBLightRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::transbot_msgs::RGBLightRequest_<ContainerAllocator>& v)
  {
    s << indent << "effect: ";
    Printer<int32_t>::stream(s, indent + "  ", v.effect);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANSBOT_MSGS_MESSAGE_RGBLIGHTREQUEST_H
