// Generated by gencpp from file transbot_msgs/RobotArmResponse.msg
// DO NOT EDIT!


#ifndef TRANSBOT_MSGS_MESSAGE_ROBOTARMRESPONSE_H
#define TRANSBOT_MSGS_MESSAGE_ROBOTARMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <transbot_msgs/Arm.h>

namespace transbot_msgs
{
template <class ContainerAllocator>
struct RobotArmResponse_
{
  typedef RobotArmResponse_<ContainerAllocator> Type;

  RobotArmResponse_()
    : RobotArm()  {
    }
  RobotArmResponse_(const ContainerAllocator& _alloc)
    : RobotArm(_alloc)  {
  (void)_alloc;
    }



   typedef  ::transbot_msgs::Arm_<ContainerAllocator>  _RobotArm_type;
  _RobotArm_type RobotArm;





  typedef boost::shared_ptr< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> const> ConstPtr;

}; // struct RobotArmResponse_

typedef ::transbot_msgs::RobotArmResponse_<std::allocator<void> > RobotArmResponse;

typedef boost::shared_ptr< ::transbot_msgs::RobotArmResponse > RobotArmResponsePtr;
typedef boost::shared_ptr< ::transbot_msgs::RobotArmResponse const> RobotArmResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::transbot_msgs::RobotArmResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::transbot_msgs::RobotArmResponse_<ContainerAllocator1> & lhs, const ::transbot_msgs::RobotArmResponse_<ContainerAllocator2> & rhs)
{
  return lhs.RobotArm == rhs.RobotArm;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::transbot_msgs::RobotArmResponse_<ContainerAllocator1> & lhs, const ::transbot_msgs::RobotArmResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace transbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce432449e1f32c24abf23350648dc66d";
  }

  static const char* value(const ::transbot_msgs::RobotArmResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce432449e1f32c24ULL;
  static const uint64_t static_value2 = 0xabf23350648dc66dULL;
};

template<class ContainerAllocator>
struct DataType< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "transbot_msgs/RobotArmResponse";
  }

  static const char* value(const ::transbot_msgs::RobotArmResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#response\n"
"Arm RobotArm\n"
"\n"
"\n"
"================================================================================\n"
"MSG: transbot_msgs/Arm\n"
"Joint[] joint\n"
"\n"
"================================================================================\n"
"MSG: transbot_msgs/Joint\n"
"int32 id\n"
"int32 run_time\n"
"float32 angle\n"
;
  }

  static const char* value(const ::transbot_msgs::RobotArmResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.RobotArm);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RobotArmResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::transbot_msgs::RobotArmResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::transbot_msgs::RobotArmResponse_<ContainerAllocator>& v)
  {
    s << indent << "RobotArm: ";
    s << std::endl;
    Printer< ::transbot_msgs::Arm_<ContainerAllocator> >::stream(s, indent + "  ", v.RobotArm);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANSBOT_MSGS_MESSAGE_ROBOTARMRESPONSE_H
