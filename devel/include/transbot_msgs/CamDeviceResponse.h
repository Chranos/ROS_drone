// Generated by gencpp from file transbot_msgs/CamDeviceResponse.msg
// DO NOT EDIT!


#ifndef TRANSBOT_MSGS_MESSAGE_CAMDEVICERESPONSE_H
#define TRANSBOT_MSGS_MESSAGE_CAMDEVICERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace transbot_msgs
{
template <class ContainerAllocator>
struct CamDeviceResponse_
{
  typedef CamDeviceResponse_<ContainerAllocator> Type;

  CamDeviceResponse_()
    : camDevice()  {
    }
  CamDeviceResponse_(const ContainerAllocator& _alloc)
    : camDevice(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camDevice_type;
  _camDevice_type camDevice;





  typedef boost::shared_ptr< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> const> ConstPtr;

}; // struct CamDeviceResponse_

typedef ::transbot_msgs::CamDeviceResponse_<std::allocator<void> > CamDeviceResponse;

typedef boost::shared_ptr< ::transbot_msgs::CamDeviceResponse > CamDeviceResponsePtr;
typedef boost::shared_ptr< ::transbot_msgs::CamDeviceResponse const> CamDeviceResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator1> & lhs, const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator2> & rhs)
{
  return lhs.camDevice == rhs.camDevice;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator1> & lhs, const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace transbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "77bcfcb9f0516ec55f1e2884e0762f17";
  }

  static const char* value(const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x77bcfcb9f0516ec5ULL;
  static const uint64_t static_value2 = 0x5f1e2884e0762f17ULL;
};

template<class ContainerAllocator>
struct DataType< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "transbot_msgs/CamDeviceResponse";
  }

  static const char* value(const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#response\n"
"string camDevice\n"
"\n"
;
  }

  static const char* value(const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camDevice);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CamDeviceResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::transbot_msgs::CamDeviceResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::transbot_msgs::CamDeviceResponse_<ContainerAllocator>& v)
  {
    s << indent << "camDevice: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camDevice);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANSBOT_MSGS_MESSAGE_CAMDEVICERESPONSE_H
