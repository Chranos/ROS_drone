// Generated by gencpp from file transbot_msgs/PWMServo.msg
// DO NOT EDIT!


#ifndef TRANSBOT_MSGS_MESSAGE_PWMSERVO_H
#define TRANSBOT_MSGS_MESSAGE_PWMSERVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace transbot_msgs
{
template <class ContainerAllocator>
struct PWMServo_
{
  typedef PWMServo_<ContainerAllocator> Type;

  PWMServo_()
    : id(0)
    , angle(0)  {
    }
  PWMServo_(const ContainerAllocator& _alloc)
    : id(0)
    , angle(0)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef int32_t _angle_type;
  _angle_type angle;





  typedef boost::shared_ptr< ::transbot_msgs::PWMServo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::transbot_msgs::PWMServo_<ContainerAllocator> const> ConstPtr;

}; // struct PWMServo_

typedef ::transbot_msgs::PWMServo_<std::allocator<void> > PWMServo;

typedef boost::shared_ptr< ::transbot_msgs::PWMServo > PWMServoPtr;
typedef boost::shared_ptr< ::transbot_msgs::PWMServo const> PWMServoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::transbot_msgs::PWMServo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::transbot_msgs::PWMServo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::transbot_msgs::PWMServo_<ContainerAllocator1> & lhs, const ::transbot_msgs::PWMServo_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.angle == rhs.angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::transbot_msgs::PWMServo_<ContainerAllocator1> & lhs, const ::transbot_msgs::PWMServo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace transbot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::transbot_msgs::PWMServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::transbot_msgs::PWMServo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transbot_msgs::PWMServo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::transbot_msgs::PWMServo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transbot_msgs::PWMServo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::transbot_msgs::PWMServo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::transbot_msgs::PWMServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5a368d31c65388d88289de5a105a271";
  }

  static const char* value(const ::transbot_msgs::PWMServo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5a368d31c65388dULL;
  static const uint64_t static_value2 = 0x88289de5a105a271ULL;
};

template<class ContainerAllocator>
struct DataType< ::transbot_msgs::PWMServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "transbot_msgs/PWMServo";
  }

  static const char* value(const ::transbot_msgs::PWMServo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::transbot_msgs::PWMServo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"int32 angle\n"
;
  }

  static const char* value(const ::transbot_msgs::PWMServo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::transbot_msgs::PWMServo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PWMServo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::transbot_msgs::PWMServo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::transbot_msgs::PWMServo_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "angle: ";
    Printer<int32_t>::stream(s, indent + "  ", v.angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TRANSBOT_MSGS_MESSAGE_PWMSERVO_H
